# org-mode config
#+STARTUP: indent
#+TODO: TODO | DONE WONT

* GOAL

Create a data page for non-tech user to upload excel spreadsheets.
They can add structure to the data
They can retrieve their data
They can build a webpage that displays their data

* Components
** Web app (Judoon::Web)
** Spreadsheet Parsing (Judoon::Spreadsheet)
** Templating Engine (Judoon::Tmpl)
** Ontology Mapper (Judoon::SiteLinker)
** User Management (Judoon::DB::User::Schema)
** Data Management (<unnamed>)
** App Exporter (<unnamed>)
* Link HTML
<div class="input-prepend"><span class="add-on">&#x1f517;</span></div>

* reboot db:
alias dbicm="DBIC_MIGRATION_SCHEMA_CLASS=Judoon::DB::User::Schema dbic-migration -Ilib"
dbicm drop_tables
dbicm install --to_version 1
dbicm upgrade

* Links
- A Link is an Href and a Label
  + an Href  may be /static/, /variable/, /variable+acc_tmpl/
  + a  Label may be /static/, /variable/, /variable+acc_tmpl/
- /static/ :: provided
  + Href: http://google.com
  + Label: Google
- /variable/ :: from variable field
  + Href: http://mysite.com/{my_id}/view  *or* {my_site}
  + Label: http://mysite.com/{my_id}/view *or* "MyAcc: {my_id}" *or* {my_site}
- /variable+acc_tmpl/ :: accession field provides url
  + Href: http://pubmed.org/{pmid} *or* http://pubmed.org/?doi={doi} *or* http://pubmed.org/<trans(doi)>/ 
  + Label: <default from accession> *or* see above *or* "DOI: {doi}"
  +   need some metadata to tell what type of accession (J::Acc::Pubmed)


- accession: variable_source: {gene_id} target_site: "Entrez Gene"  label_type: default label_value: 
- accession: variable_source: {gene_id} target_site: "Entrez Gene"  label_type: url label_value: 
- accession: variable_source: {gene_id} target_site: "Entrez Gene"  label_type: static label_value: "See Entrez Gene" 
   For these, easy:  [textseg],[varseg is {gene_id}]
- accession: variable_source: {gene_id} target_site: "Entrez Gene"  label_type: default label_value: 
   Tougher:  [textseg], [varseg is convert_acc({gene_id})]
- accession: variable_source: {gene_id} target_site: "Entrez Gene"  label_type: default label_value:  url_postfix: '?filter=boo'
  scheme: [textseg],[varseg is {gene_id}],[url-postfix]

* Accessions
** Judoon::Accession::Roles::IsCanonical
for Entrez::GeneId, Uniprot::UniprotId, etc.
** Judoon::Accession::Roles::IsntCanonical
Entrez::GeneName, Uniprot::
** schema

Site
  id 
  name
  default_label


Accession
  id
  name


SiteAccession
  id
  site_id
  accession_id


Segments
  id
  text
  order





* Color Scheme
Color Scheme: http://colorschemedesigner.com/#3861Tw0w0w0w0
Primary Color:
00A876	207E62	006D4C	35D4A4	5FD4B1
Secondary Color A:
0D56A6	274F7D	04356C	4186D3	689AD3
Secondary Color B:
4DDE00	55A62A	329000	7AEE3C	99EE6B
Complementary Color:
FF5900	BF6230	A63A00	FF8240	FFA473

* cursor movement

given:
  i i i n
b i i i n
b i c i n
b i i i

  i i i i n
b i i i i i i n
b i i c i n
b i i i i



up: 
down:
left: c.prev.type != inline ? do_nothing() : c.prev.before(c.detach);
right:  

* url design
| URL                           | Action                                                  |
| \/                            | index page                                              |
| /user                         | list of users (optional, maybe just redirect to prompt) |
| /user/$user_id                | homepage of $user_id                                    |
| /user/$user_id/dataset        | list of your datasets                                   |
| /user/$user_id/dataset/$ds_id | view of $user's $dataset                                |
| /user/$user_id/page           | list of your pages                                      |
| /user/$user_id/page/$page_id  | view of $user's $page                                   |

Troublesome.  I'm not good at REST.

Start Over:

Two types of users, browsers and owners.  Browsers are like me view
someone elses github repo.  All I can really do is view/GET, maybe
add/POST new issues.

Github:
Broswer:
  Viewing: /$id/$repo/@nouns
     This generally works and maps well to git. Logged in user is *not* part of url.
  Manipulating:
     Issues:
       GET /$id/$repo/issues/$issue_id => see issue
       GET /$id/$repo/issues/new => new issue post form
       Issues is okay, b/c issue id is \d+, but other places might need reserved names
     Unwatch:
        Not sure what this does.  I think if $login_id != $url_id, calls on log_in->repo
Owner:
    Self admin: no $user is URL
        GET /settings/profile
        GET /dashboard/{issues,pulls,yours}
    New repo: /new
    Inbox: /inbox/notifications
      Deleting notification does HTTP DELETE on /inbox/$id    Logout: /logout
    $user/$repo/{admin,pulls/new,toggle_watch,fork_select}
    Basic account view is /$user


Twitter:
Browser:
  View timeline: /$user/
  See tweet: /$user/status/$id
Owner:
  Edit profiles: GET /settings/profile
  Add new tweet POST /1/status/update.json
  Delete tweet  POST /1/status/delete.json


Me: I like github model, but I'm not smart, so put user ids under /user
/signup
/settings/*
/dashboard/*
/user/felliott/dataset/5/
/user/felliott/table/7
/user/felliott/page/6


/user/felliott/ => overview
/user/felliott/dataset/ => redir to overview
/user/felliott/dataset/1 => edit dataset 1
/user/felliott/dataset/1?_method=delete => delete dataset 1
/user/felliott/dataset/1/columns => Annotate Columns

/user/felliott/page/ => redir to overview?
/user/felliott/page/1 => edit page


Access Control:
  Visitor:
    /settings   => login
    /user/$user => visitor view
    /user/$user/dataset/$ds => view if public?
    /user/$user/dataset/$ds/page/$page => view if public
    /page/$page_id

    I think:
    Eventually:
    /user/$user
    /dataset/$ds_id
    /dataset/$ds_id/column/$col_id
    /page/$page_id
    /page/$page_id/column/$page_id
    Postpone as part of API work.

    For now:
    Don't allow visitor to see anything below /user/edit_GET.
    Public Datasets go to /dataset/
    Public Pages got to /page/

  Owner:
    /settings => /settings
    


* existing data
** Genetic Approaches
*** Schwarzbauer DTC
No Linked Data
Category Search
**** http://www.cellmigration.org/resource/discovery/schwarzbauer/schwarzbauer_dtc_auto.cgi
**** 
*** Schwarzbauer RNAi
Category Search
No Linked Data
Alternate links
**** http://www.cellmigration.org/resource/discovery/schwarzbauer/schwarzbauer_rnai2.cgi
*** Montell Super Table
Category Search
Rowspans
Color Coding
**** http://www.cellmigration.org/resource/discovery/montell/montell_super2.cgi
**** http://www.cellmigration.org/resource/discovery/montell/data/super-table-6.xls
*** Montell Downstream targets
Not converted
**** http://www.cellmigration.org/resource/discovery/montell_down_mig.shtml
*** Montell cytoskeleton screens
**** http://www.cellmigration.org/resource/discovery/montell/dm_cytoskel_screen.cgi
**** http://www.cellmigration.org/resource/discovery/montell/dm_mig_gene_screen1_v1.xls
*** D'ambrosio RNAi
Color-coding
Images
Column Footnotes
**** http://www.cellmigration.org/resource/discovery/vale/dambrosio2010_rnai.cgi
**** http://www.cellmigration.org/resource/discovery/vale/down_file.cgi?name=dambrosio_all.tab&mode=text
*** Montell Up-regulation
Not converted
**** http://www.cellmigration.org/resource/discovery/montell_up_mig.shtml
*** Montell vesicle screen
**** http://www.cellmigration.org/resource/discovery/montell/dm_vesicle_screen.cgi
**** http://www.cellmigration.org/resource/discovery/montell/dm_mig_gene_screen2_v1.xls
** Genetic Screens
*** Condeelis MTLn3
**** http://www.cellmigration.org/resource/discovery/condeelis/view_condeelis2.cgi
**** Weird: 2nd table: http://www.cellmigration.org/resource/discovery/condeelis/view_condeelis2.cgi?table=table2
*** Geiger Bg4
Nothing
**** http://www.cellmigration.org/resource/discovery/geiger/geiger_bg4.shtml
*** Geiger Bg5
Nothing
**** http://www.cellmigration.org/resource/discovery/geiger/geiger_bg5.shtml
*** Geiger RNAi
No Data
Images
**** http://www.cellmigration.org/resource/discovery/geiger/view_geiger_rnai.cgi
*** Brugge Master
No Data
**** http://www.cellmigration.org/resource/discovery/brugge/brugge_master.cgi
*** Simpson 2008 RNAi:
Category Search
Images
Column Footnotes
**** http://www.cellmigration.org/resource/discovery/brugge/simpson2008_rnai.cgi
**** http://www.cellmigration.org/resource/discovery/brugge/simpson2008/Simpson_etal_NCB_2008-2.xls
*** Geiger Bg3
Not converted
**** http://www.cellmigration.org/resource/discovery/geiger/geiger_bg3.shtml
*** Horwitz Lw1
Not converted
**** http://www.cellmigration.org/resource/discovery/horwitz/horwitz_lw1.shtml
*** Geiger RNAi 2009
Images
Category Search
**** http://www.cellmigration.org/resource/discovery/geiger/geiger2009_rnai.cgi
*** Geiger Bg2
Not converted
**** http://www.cellmigration.org/resource/discovery/geiger/geiger_bg2.shtml
*** Geiger Chembridge
Not Converted
**** http://www.cellmigration.org/resource/discovery/geiger/geiger_chembridge.shtml
* form submit buttons:
- dataset/list:   [Upload]
- dataset/edit:   [Update] updates & refreshes, [Reset] resets
- ds_column/list: [Save Changes] update & refresh, [Cancel and return to dataset] href to previous
- ds_column/edit: [Submit] Submits and returns
- page/edit:      [Save Changes] update & refresh, [Reset] resets
- page/list:      empty
- page_column/edit: [Save Changes] Submits & returns, [Reset] resets, [Cancel and return to pae] href to previous
- user/edit:       [Submit]

[Update] Updates & refreshes
[Submit] Submits & returns to previous
[Reset]  resets
[Cancel and return] href to previous
* permissions
need a permissions flag for Pages.

If a page is public, its dataset is necessarily public, yes?)
Not necessarily. Maybe they're only showing part of the dataset.
Which means we need to flag datasets as well.
Plus, when offering to d/l spreadsheet, need to be able to say 'only export some columns';

permission_enum
  0 = private, 1 = public, 2 = password-protect,
password-protect: owner creates password, user needs password.
private / public are obvious, what's the best restriction model?

password protects well, but announces that a page exists even if not accessible
private url can hide, but doesn't protect contents

do we need both?
start with password-protect, we can add url hiding later. (I think)

permissions integer foreign key references tt_permissions(pk)
tt_permissions (pk, type)
1 private
2 public
3 password-protect

permissions_field

* Tmpl::templates
** versioning
May be needed in the future.  Demo interface:

# versioning syntax
# my $output = $translator->translate({
#     from         => 'Judoon::WebWidgets',
#     from_version => 1,
#     to           => 'JQuery::Template',
#     to_version   => 1,
#     template     => $template,
# });
* API
** Literature resources:
A lot has been written on REST
- future api needs:
http://www.zemanta.com/fruitblog/so-you-want-to-offer-a-public-api/
http://news.ycombinator.com/item?id=4290244 - HN on previous
  throttling, to prevent abuse
  related: quotas?
  documentation
  tools to keep track
- HATEOAS
http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http
http://blog.steveklabnik.com/posts/2011-08-07-some-people-understand-rest-and-http

Make heavy use of HTTP Headers
Accept: application/vnd.judoon-v1+json
Link: </page?page=1, rel="prev">, </page?page=3, rel="next">
Accept-type: vs. extensions: honor accept-type first
after create, return Location, don't duplicate in response

Related from Steve Klabnik:
http://designinghypermediaapis.com/
https://rstat.us/users/getsomerestbook  

** Current Conundrum:

I have a couple of different locations for endpoints, none of which is
canonical, none of which is tested for API-fulness.

  /API/Dataset
     provides a jsony searchable endpoint for dataset data searching
  /Page
     provides a non restful (just resty looking) enpoint for view
     public pages and lists of pages
  /RPC/*
     Most resty, but untested for anything but html.  implements the
     full suite of {list,object}x{GET,POST,PUT,DELETE}, but isn't
     great. Could probably have better default implementations. All
     controllers have all methods, even ones they don't need. Takes
     advantage of REST::ForBrowsers.

** Ideas for resolving:
*** /API/Dataset is misnamed. Should be DatasetData.
This solves issues with combining its search params with that of Dataset.
However, it stil currently uses the weird JQDataTables search params.
*** /Page and /RPC/Page could be merged.
visitor:
  GET list: public list (HTML / JSON)
  GET object: datatable view
    HTML: show JQDataTable
    JSON: merge data into template, return.
    Maybe we need Page{,Column,Data} like Dataset{,Column,Data}?
owner:
  GET list: show public + owned
    JSON: can filter with query params (?owner=me,owner=!me)
    HTML: switch with js and action buttons
          [Show All] [Show Public] [Show mine]
  GET object:
    HTML:
      if page.owner != me: show preview
      else               : show edit
    JSON:
      {title: $title, preamble: $preamble, postamble: $postamble}

** Next steps
*** ::Controller::REST vs. Controller::DBIC::API
- DBIC::API does CRUD for me
  REST, I have to write my own (buggy)
  but DBIC::API may not work, have to override.
- Does DBIC::API work with REST::ForBrowsers?
- can DBIC::API show different based on owner/visitor?
- I like the REST status methods (status_found(), status_not_found())
- I like the simplicity of ::REST
- what about both?
use DBIC::API to build the update code and provide the /api interface
::REST dispatches to /api/rest/object/method/?
What does ::REST do in this scenario?
   * Dataset
     after list_GET: redirection to /user/edit (this goes away)
     after object_GET: download views
   * DatasetColumn:
     edit_object: remove multiple columns (NYI)
     object_GET: add sitelinker data to stash
   * Page:
     add_object: create object from parent dataset
     after object_GET: much stash munging
   * PageColumn:
     add_object: set default template
     after object_GET: much stash munging (sitelinker, sample_data, webwidgets)
     munge_edit_param: translation of template
   html-specific stuff?
do I then support /api/(.*) and /$1?
**** After adding ::DBIC::API and updating ::RPC to use it:
- Dataset:
  after object_GET:
    handle tabular views
    add pages to stash
  after object_DELETE:
    redir to /user/edit
- DatasetColumn:
  after list_GET:
    set up sample data in stash
    set column annotations
  after object_GET:
    add sitelinker accession groups to stash
  after object_PUT:
    go back to dataset columns (remove this, it's inconsistent)
- Page:
  after object_GET:
    add page_columns to stash
    add templates to stash if view==preview
    set stash->{template} if view==preview
    set up headers_used stash var 
  after object_DELETE:
    go to /user/edit
- PageColumn:
  after object_GET:
    set up many support stash variables (link_site-json ds_column_json sitelink_sites sample_data)
    translate template to webwidgets
  before object_PUT
    translate webwidgets to native
  after object_DELETE
    go to Page::object_GET
    
*** Need to create a DatasetData class
- does it need to be DBIC-backed?
- If not, can it work with DBIC::API?
*** Need to add to_JSONs to our DBIC classes?
*** if I change classes, that will require a *lot* of updates to templates
uri_for_action('/rpc/$') will need to change (currently 35, not so bad)
*** need to change chaining, too.
Dataset, Page, Template all become top level.
*** Where do we store it?
Should we have an /api just for api stuff?
I Don't like this, it feels weird and I'm afraid it'll result in work duplication
How do others do it?
  Github uses api subdomain, but you can get stuff throught the regular website, too
*** So you've decided to split /api and /everything_else, Now what?
**** DONE get RPC working fully.
CLOSED: [2012-08-09 Thu 16:36]
- some data isn't being set in stash
- we're using hashrefs instead of objects now
- fix that, son.
**** DONE move API/Dataset
CLOSED: [2012-08-09 Thu 16:36]
- change to DatasetData.pm
- fix path in preview page
**** DONE re-base /api/rest/*/ to be at /api/*
CLOSED: [2012-08-09 Thu 16:37]
**** DONE get rid of API::REST.pm
CLOSED: [2012-08-09 Thu 16:49]
- move rest_base to API.pm
**** DONE Should I move ControllerBase/REST?
CLOSED: [2012-08-09 Thu 17:43]
- Hold on, I'm dumb
- ControllerBase lives outside Controller/ so seems to get away with all sorts of shit.
- Maybe RPC should be in ControllerBase?
- Then update RPC::* to user ControllerBase/RPC
**** Time to merge /Page and /RPC/Page? No!
- bothers me.
- I feel like it might make a unified controller too complicated
- maybe RPC::Page becomes Private::Page and Page becomes Public::Page
  I shouldn't have named it Private::*.  It's not private, in fact it's canonical.
- ControllerBase::Public like RPC?
  Perhaps.  Build Page & Dataset first, then factor out common code, if necessary

- URI structure:
  For Visitor:
     /$user/ - person / org splash page ("Welcome to the CMC Data Repository")
     /$user/dataset/ - list public datasets ("These are our public datasets")
     /$user/page/ - list public page ("These are our public pages")

     /dataset/ - all public datasets. Searchable. Links to /$user/dataset/$ds_id
     /dataset/$ds_id is a redir to /$user/dataset/$ds_id

Owner vs. visitor
1.) Where do visitors see all public datasets?
   /dataset/?search_args
2.) Where does that take them?
   /$user/dataset/$dataset_id

canonical location for dataset/page
  /$user/dataset/$ds_id vs. /dataset/$ds_id
  Core issue: what does it mean when /$user/ ne $c->user?
  Then we are a visitor on /$user/.
  Why would we want to do this?
  - Maybe /$user/ is an organization that wants to have a blurb about what they do?
    e.g.:  /cellmigration/

  Welcome to the cell migration consortium's data sharing repository.
  Here we publish data generated by members of the CMC.

    [Search for term in ds]
    * DS 1
    * DS 2
    * DS 3
    
 Downside:
   a little tricky to manage owner vs. visitor, but you're a programmer godammit, just do it.

**** How to procede:
***** Skip common ControllerBase::Public for now, until there's a real need for it.
***** DONE Check up Controller::Page.pm, what changes do we need to make?
CLOSED: [2012-08-13 Mon 13:30]
***** DONE Build a Controller::Dataset.pm
CLOSED: [2012-08-13 Mon 13:30]
***** DONE make public views for /user/*
CLOSED: [2012-08-14 Tue 12:34]
***** DONE test access controls. [2/3]
CLOSED: [2012-08-14 Tue 12:54]
****** DONE no visitors to /{dataset},page}/column*
CLOSED: [2012-08-14 Tue 12:43]
****** DONE no visitors can do PUT POST DELETE
CLOSED: [2012-08-14 Tue 12:43]
