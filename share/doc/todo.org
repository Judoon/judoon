# org-mode config
#+STARTUP: indent
#+TODO: TODO | DONE WONT

* Judoon::Web
** General / Misc [7/22]
*** DONE [#A] URL widgets                                         :feature:
CLOSED: [2012-05-15 Tue 16:03]
Finish this feature
*** DONE [#A] one button page-making
CLOSED: [2012-05-17 Thu 17:55]
user uploads sheet, we create page that exactly maps the spreadsheet
no formatting, linking, etc.
just a searchable table
*** DONE [#A] intro page: splash screen:
CLOSED: [2012-07-09 Mon 17:48]
Judoon turns this: <xls screenshot> into this: <web screenshot>
Supports:
   linking to well-known databases
   automatic sorting, paging, searching
   downloadable and self-hostable
*** DONE [#A] add public pages list
CLOSED: [2012-07-19 Thu 14:51]
*** DONE [#A] Signup, on bad password, get the module name, too.
CLOSED: [2012-07-19 Thu 16:16]
*** DONE [#A] Delete a dataset column, does not remove that data from the data array
CLOSED: [2012-07-20 Fri 07:49]
*** DONE [#A] PageColumn does not support link prefix?
CLOSED: [2012-07-23 Mon 20:01]
*** TODO [#B] Need 2 type of publish, access-restricted, public release :feature:
*** TODO [#A] quick deployment
user downloads tarball or zip
Look at Wordpress, drupal for quick deployment ideas
*** TODO [#A] unify webwidget templates
Right now we have webwidget templates in ::Dialect::WebWidgets and in forms/*/library.tt
Find some way so we don't have to edit in two places.
*** TODO [#C] unify catalyst views for tables
in Controller::RPC::Dataset, we have some sloppy code for permitting
downloads of tabular data in different formats.  Perhaps this should
be unified under one module, Judoon::Web::View::Tabular.  Store the 2d
arrayref in stash->{tabular}{data}, the format in ->{tabular}{format},
and create / dispatch based on that.
Maybe we can do this already by patching C::V::Download?
*** TODO [#B] Add hierarchical nav at the top of edit pages
From Page Column, it would be nice to get to:
<Overview> <Dataset> <Dataset Columns> <Page>
*** TODO [#A] Add raw/csv/dataset downloads for page (maybe create RPC::Role::TabularView)
*** TODO [#A] permissions: protect visitors from edit pages
*** TODO [#B] switch to passing only Hashrefs to templates
Need to go through and audit controllers / templates figure out where
we can simplify
*** TODO [#B] Gene wiki for sitelinker
*** TODO [#A] Can we use google docs to process our spreadsheets?
*** TODO [#A] need ordered relationships (Dataset => DatasetColumn, Page => PageColumn)
*** TODO [#A] need timestamps for Pages / Datasets  
*** TODO [#A] Signup page always shows not-logged-in sidebar because user.is_owner is never set
I guess we need to do the user check in the base controller?
*** TODO [#B] Seem to have encoding errors with troublesome.xls
** Interface [5/9]
*** DONE [#B] lessen gray border, way to wide
CLOSED: [2012-07-09 Mon 17:46]
*** DONE [#A] make 'Get Started' not get :visited coloration
CLOSED: [2012-07-09 Mon 17:44]
*** DONE [#A] Make Header not get :visited coloration
CLOSED: [2012-07-09 Mon 17:46]
*** DONE [#A] Feature: upload excel spreadsheet, automatically create page
CLOSED: [2012-07-09 Mon 17:47]
No formatting, no annotation, dead simple.
*** DONE [#A] pages should generally use components notification
CLOSED: [2012-07-19 Thu 21:32]
*** TODO [#A] make front page fit without scrolling
*** TODO [#A] Integrate color scheme with bootstrap
*** TODO [#A] maybe center the page? the splash screen looks weirdly off-center
*** TODO [#A] how do visitors see deep urls /user/notme/dataset/1/column/4?
** User [1/9]
*** DONE [#A] Need delete button for datasets
CLOSED: [2012-07-17 Tue 11:29]
*** TODO [#A] Don't try to upload w/o file
*** TODO [#A] Forgot username / password link
*** TODO [#A] set up Fill In Form
*** TODO [#A] update profile: make sure other email not in use?
*** TODO [#A] settings/profile: don't allow user to unset email
*** TODO [#B] add how to contact field to model
Whe user publicizes page, need a "Contact me by: .." blurb.
** Page::edit [0/4]
*** TODO [#A] add a "how to cite" field to Pages / Datasets
*** TODO [#A] New layout idea
GET page/object has page form, button "Edit columns", underneath is
blurb about where title / preamble / postamble / attribution go (w/ example)
"Title"
"Preamble"
"Attribute"
<dummytable>
"Postamble"

The "Edit Columns" button goes to GET pagecolumns/list

*** TODO [#B] Page edit can go back to dataset, but not overview
*** TODO [#A] Add column submit button submits to wrong form
I think I need to add form ids to submit butons
*** TODO [#B] Page::edit: add option for advanced (i.e. TinyMCE) {pre,post}amble editor

** Dataset::edit [1/2]
*** DONE [#A] Allow multiple pages per ds
CLOSED: [2012-07-17 Tue 11:30]
User may want to create multiple views of a complex dataset
*** TODO [#C] no edit data, save column metadata, reload from excel :feature:vague:
** DatasetColumn::list [0/1]
*** TODO [#B] replace delete list with delete button?      :interface:eval:
** DatasetColumn::edit [1/2]
*** DONE [#A] accession lost on re-annotation                         :bug:
CLOSED: [2012-07-19 Thu 15:25]
I set column 1 to be a gene_symbol. Save, return to list, re-annotate: it's now a gene_id
*** TODO [#B] virtual columns for mapped accessions               :feature:
some columns may need to be mapped to real accessions
e.g. gene_symbols => gene_ids. For these during annotation, if user
sets field as accession, create virtual column e.g.: {gene_symbol} =>
{__annotation_gene_symbol_to_gene_id}
** Login [4/6]
*** DONE [#A] update Login to use proper users, i.e. from db
CLOSED: [2012-07-17 Tue 11:28]
Catalyst::Plugin::Authorization::Roles - Role-based authorization
Catalyst::Plugin::Authorization::ACL - ACL-based authorization
*** DONE [#A] /login needs to display an error message
CLOSED: [2012-07-19 Thu 18:28]
*** DONE [#A] after successful login, should redir to overview
CLOSED: [2012-07-19 Thu 18:28]
*** DONE [#A] what happens when logged in user goes to /login?
CLOSED: [2012-07-19 Thu 18:53]
*** TODO [#C] Allow alternative logins? (FB, OAuth, etc?)           :feature:
*** TODO [#B] implement roles and acls                            :feature:
admin privileges
*** TODO [#A] What happens when a logged-in user hits /signup?

** RPC [0/4]
*** TODO [#A] update munge_*_params to do basic parameter unpacking
can call ExtractParams::extract_params()
RPC::*.pm will need to be updated.
*** TODO [#B] update ::RPC::*.pm to return 'Unsupported' unsupported actions
e.g. most don't support list_PUT.
*** TODO [#A] finish pod-ing
*** TODO [#A] Are subclasses using the default behaviors? Should we implement/remove them?
add_object -> create($params);
get_object -> find(id => $id);
** Tests [0/2]
*** TODO web-application.t needs some refactoring [0/4]
**** TODO probably should reset fixtures between subtests
There could be a lot of entanglement, a test in a previous subtest
could delete the entry that we're expecting now.
**** TODO should we have explict & interface tests?
i.e. when updating a dataset, have one test that submits the form on
the edit page and another that directly PUTs to dataset/object
**** TODO factor out common routines
uploading datasets, testing update forms
**** TODO better way of identifying pages, forms, elements on page
how do we tell if a dataset has been deleted?
how do we know which delete form to submit
what page did we get?
*** TODO need to write some subjective stress tests
how does judoon perform with large datasets?
** modules for evaluation:
*** Catalyst::Controller::DBIC::API::REST
*** Catalyst::Plugin::StatusMessage
*** Catalyst::Plugin::ErrorCatcher
After new catalyst is released

*** DBIx::Class::UnicornLogger 
*** Catalyst::Controller::REST::ForBrowsers?
most of our actions are pretty basic
HTML5 allows multiple forms
wierd paths:
   Page/preview  => could be /?view=preview or accept-type?
   Dataset/postadd => not sure I'm still using this
* Judoon::DB::User::Schema
** General / Misc [/]
*** DONE [#A] Get rid of J::DB::Users / J::W::Model::Users / tests
CLOSED: [2012-03-28 Wed 14:10]
*** DONE [#A] Convert DB::User to DBIC
CLOSED: [2012-03-28 Wed 13:45]
*** TODO [#A] DSColumn creation code should probably be moved into Dataset
Right now, User creates DSColumns.  That seems weird. That should be
DS's responsibility.  Also, DSColumns create their own shortname.  I
think that that's Dataset's job, since we don't want DSColumns in a
dataset to have identical shortnames.
*** TODO [#C] Later may need to create a wrapper class for code that doesn't live in any one result
See http://www.perlmonks.org/?node_id=915657 for how to wrap this with a model.
E.G. create Judoon::DB::User that has => schema
*** TODO [#B] create per-user databases
When a user uploads a spreadsheet, create a new database and deploy to there.
See Catalyst mailing list, "[Catalyst] Authentication in a Many Database Scenario (again)", May 15, 2012
** Result::DatasetColumn [/]
*** TODO [#A] DatasetColumns needs an order field
*** TODO [#A] DatasetColumns.name should probably be called .title
PageColumns uses .title  (title seems more apropos for Columns)
what about Page or Dataset?
** Result::User [2/3]
*** DONE [#A] Fill out User class to make a proper user
CLOSED: [2012-07-17 Tue 12:17]
password, email, etc.
DBIx::Class::PassphraseColumn
Authen::Passphrase::BlowfishCrypt
http://www.catalystframework.org/calendar/2011/15
Catalyst::Authentication::Realm::SimpleDB
Catalyst::Authentication::Store::DBIx::Class
*** DONE [#B] create test xls to excercise import_data()             :test:
CLOSED: [2012-07-19 Thu 21:33]
specifically, add a data column w/o a name
*** TODO [#A] move R::User::import_data into its own module
* Judoon::Tmpl
** TemplateTranslator [/]
*** DONE [#A] Fill out TemplateTranslator
CLOSED: [2012-05-15 Tue 16:14]
- Create J::Tmpl::Widget class
J::Tmpl::Widget::Text, J::Tmpl::Widget::Data, etc.
Can convert from class to html or template?
** Node [/]
** Dialect::WebWidgets [0/1]
*** TODO [#B] move widget-format-target into its own hidden with name widget-link-null
need to update WebWidgets.pm && library.tt
** Dialect::JQueryTemplate [0/1]
*** TODO need to write a parser
* Judoon::Spreadsheet::Importer
** TODO [#B] move code from J:DB::U::S::R::U::import_data() into here
* Judoon::SiteLinker [0/4]
** TODO Needs a lot more maps
** TODO Can use Uniprot ID mapper to convert ids
Then, the uniprot_acc to gene map could convert to gene_id, and use that mapping
** TODO Need order encoded in mapping
** TODO Would this be easier to do in a database, or more simply represented as a schema?
* judoon.js
** TODO Move JS into object
* deployment [0/1]
** TODO add deployment deps
- [ ] Starman
- [ ] Server::Starter
- [ ] Net::Server::SS::PreFork
- [X] DBIx::Class::Migration
