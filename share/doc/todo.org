# org-mode config
#+STARTUP: indent
#+TODO: TODO | DONE WONT

* General [0/3]
** TODO [#C] get rid of lazy_build from Moose classes
lazy & builder are preferred, lazy_build give automatic predicate and
clearer, which are rarely needed.  Also, lazy + build are Moo-compliant.
See: https://metacpan.org/module/Moose::Manual::BestPractices#Avoid-lazy_build
** TODO [#C] don't make abstract base classes w/ Moose (Moo)
An ABC is really an interface which is really a Role
- [X] ::Tmpl::Node
** TODO [#C] convert Moosey modules to Moo
This may not always be possible.
- [ ] ::Tmpl::Translator
- [X] ::SiteLinker
- [ ] ::Judoon::DB::User::Schema
- [ ] ::Error - uses Throwable
- [ ] ::Tmpl::Node - use MooseX::Storage
* Judoon::Web                                                    :Judoon_Web:
** General / Misc [8/18]
*** DONE [#A] URL widgets                                         :feature:
CLOSED: [2012-05-15 Tue 16:03]
Finish this feature
*** DONE [#A] one button page-making
CLOSED: [2012-05-17 Thu 17:55]
user uploads sheet, we create page that exactly maps the spreadsheet
no formatting, linking, etc.
just a searchable table
*** DONE [#A] intro page: splash screen:
CLOSED: [2012-07-09 Mon 17:48]
Judoon turns this: <xls screenshot> into this: <web screenshot>
Supports:
   linking to well-known databases
   automatic sorting, paging, searching
   downloadable and self-hostable
*** DONE [#A] add public pages list
CLOSED: [2012-07-19 Thu 14:51]
*** DONE [#A] Signup, on bad password, get the module name, too.
CLOSED: [2012-07-19 Thu 16:16]
*** DONE [#A] Delete a dataset column, does not remove that data from the data array
CLOSED: [2012-07-20 Fri 07:49]
*** DONE [#A] PageColumn does not support link prefix?
CLOSED: [2012-07-23 Mon 20:01]
*** DONE [#A] permissions: protect visitors from edit pages
CLOSED: [2012-08-14 Tue 13:33]
*** TODO [#B] Need 2 type of publish, access-restricted, public release :feature:
*** TODO [#A] quick deployment
user downloads tarball or zip
Look at Wordpress, drupal for quick deployment ideas
*** TODO [#C] unify catalyst views for tables
in Controller::RPC::Dataset, we have some sloppy code for permitting
downloads of tabular data in different formats.  Perhaps this should
be unified under one module, Judoon::Web::View::Tabular.  Store the 2d
arrayref in stash->{tabular}{data}, the format in ->{tabular}{format},
and create / dispatch based on that.
Maybe we can do this already by patching C::V::Download?
*** TODO [#A] Add raw/csv/dataset downloads for page (maybe create RPC::Role::TabularView)
*** TODO [#B] switch to passing only Hashrefs to templates
Need to go through and audit controllers / templates figure out where
we can simplify
*** TODO [#A] Signup page always shows not-logged-in sidebar because user.is_owner is never set
I guess we need to do the user check in the base controller?
*** TODO [#B] rewrite Web::Controller::Role::GoHere as a Catalyst Plugin
*** TODO [#B] root/src/user/edit.tt2 -should be two templates, one for owners, one for visitors
*** TODO [#C] splash page decorations                               :feature:
When a visitor visits a user page (e.g. /user/cellmigration), give
cellmigration user option to decorate with welcome message,
description of self, etc.  It probably shouldn't be a fully functional
website, but maybe just a couple of blurbs and a logo image.  Maybe
other properties like: Org Name, website, contact email, affiliation,
collab policy, etc.

Page blurbs could maybe be stored in Markdown, so we don't end up
having to scrub/parse HTML?  Is there a tinymce-like control for Markdown?

*** TODO [#A] why do we have site.css AND site2.css
get rid of site.css, rename site2, yes?
** Interface [7/10]
*** DONE [#B] lessen gray border, way too wide
CLOSED: [2012-07-09 Mon 17:46]
*** DONE [#A] make 'Get Started' not get :visited coloration
CLOSED: [2012-07-09 Mon 17:44]
*** DONE [#A] Make Header not get :visited coloration
CLOSED: [2012-07-09 Mon 17:46]
*** DONE [#A] Feature: upload excel spreadsheet, automatically create page
CLOSED: [2012-07-09 Mon 17:47]
No formatting, no annotation, dead simple.
*** DONE [#A] pages should generally use components notification
CLOSED: [2012-07-19 Thu 21:32]
*** DONE [#A] how do visitors see deep urls /user/notme/dataset/1/column/4?
CLOSED: [2012-08-14 Tue 13:32]
visitors aren't allowed to see it
*** DONE [#B] Add hierarchical nav at the top of edit pages
CLOSED: [2012-08-14 Tue 13:33]
From Page Column, it would be nice to get to:
<Overview> <Dataset> <Dataset Columns> <Page>
*** TODO [#A] make front page fit without scrolling
*** TODO [#A] Integrate color scheme with bootstrap
*** TODO [#A] maybe center the page? the splash screen looks weirdly off-center
** User [1/9]
*** DONE [#A] Need delete button for datasets
CLOSED: [2012-07-17 Tue 11:29]
*** TODO [#A] Don't try to upload w/o file
*** TODO [#A] Forgot username / password link
*** TODO [#A] set up Fill In Form
*** TODO [#A] update profile: make sure other email not in use?
*** TODO [#A] settings/profile: don't allow user to unset email
*** TODO [#B] add how to contact field to model
Whe user publicizes page, need a "Contact me by: .." blurb.
** Page::edit [2/5]
*** DONE [#B] Page edit can go back to dataset, but not overview
CLOSED: [2012-08-14 Tue 13:32]
*** DONE [#A] Add column submit button submits to wrong form
CLOSED: [2012-08-14 Tue 13:32]
I think I need to add form ids to submit butons
*** TODO [#A] add a "how to cite" field to Pages / Datasets
*** TODO [#A] New layout idea
GET page/object has page form, button "Edit columns", underneath is
blurb about where title / preamble / postamble / attribution go (w/ example)
"Title"
"Preamble"
"Attribute"
<dummytable>
"Postamble"

The "Edit Columns" button goes to GET pagecolumns/list
*** TODO [#B] Page::edit: add option for advanced (i.e. TinyMCE) {pre,post}amble editor
** Dataset::edit [1/2]
*** DONE [#A] Allow multiple pages per ds
CLOSED: [2012-07-17 Tue 11:30]
User may want to create multiple views of a complex dataset
*** TODO [#C] no edit data, save column metadata, reload from excel :feature:vague:
** DatasetColumn::list [1/1]
*** DONE [#B] replace delete list with delete button?      :interface:eval:
CLOSED: [2012-08-14 Tue 13:31]
** DatasetColumn::edit [1/2]
*** DONE [#A] accession lost on re-annotation                         :bug:
CLOSED: [2012-07-19 Thu 15:25]
I set column 1 to be a gene_symbol. Save, return to list, re-annotate: it's now a gene_id
*** TODO [#B] virtual columns for mapped accessions               :feature:
some columns may need to be mapped to real accessions
e.g. gene_symbols => gene_ids. For these during annotation, if user
sets field as accession, create virtual column e.g.: {gene_symbol} =>
{__annotation_gene_symbol_to_gene_id}
** Private [2/4]
*** WONT [#A] update munge_*_params to do basic parameter unpacking
CLOSED: [2012-08-14 Tue 13:29]
can call ExtractParams::extract_params()
RPC::*.pm will need to be updated.
OBSOLETE: Private now dispatches to API::REST to do the work

*** WONT [#A] Are subclasses using the default behaviors? Should we implement/remove them?
CLOSED: [2012-08-14 Tue 13:29]
add_object -> create($params);
get_object -> find(id => $id);
OBSOLETE: Private dispatches to API::REST to do the work
*** TODO [#B] update ::Private::*.pm to return 'Unsupported' unsupported actions
e.g. most don't support list_PUT.
*** TODO [#A] finish pod-ing
** Login [4/6]
*** DONE [#A] update Login to use proper users, i.e. from db
CLOSED: [2012-07-17 Tue 11:28]
Catalyst::Plugin::Authorization::Roles - Role-based authorization
Catalyst::Plugin::Authorization::ACL - ACL-based authorization
*** DONE [#A] /login needs to display an error message
CLOSED: [2012-07-19 Thu 18:28]
*** DONE [#A] after successful login, should redir to overview
CLOSED: [2012-07-19 Thu 18:28]
*** DONE [#A] what happens when logged in user goes to /login?
CLOSED: [2012-07-19 Thu 18:53]
*** TODO [#C] Allow alternative logins? (FB, OAuth, etc?)           :feature:
*** TODO [#B] implement roles and acls                            :feature:
admin privileges
*** TODO [#A] What happens when a logged-in user hits /signup?
** API [0/2]
*** TODO [#A] NEEDS TESTS!
Especially for permissions
*** TODO [#B] make it HATEOASy
That's a thing, right?  Basically, I need to add a bunch of stuff
based on the Headers, and return apropos Link headers.  See notes.org: API
** Tests [0/2]
*** TODO web-application.t needs some refactoring [0/4]
**** TODO probably should reset fixtures between subtests
There could be a lot of entanglement, a test in a previous subtest
could delete the entry that we're expecting now.
**** TODO should we have explict & interface tests?
i.e. when updating a dataset, have one test that submits the form on
the edit page and another that directly PUTs to dataset/object
**** TODO factor out common routines
uploading datasets, testing update forms
**** TODO better way of identifying pages, forms, elements on page
how do we tell if a dataset has been deleted?
how do we know which delete form to submit
what page did we get?
*** TODO need to write some subjective stress tests
how does judoon perform with large datasets?
** modules for evaluation:
*** Catalyst::Plugin::StatusMessage
*** DBIx::Class::UnicornLogger 
*** HTTP::Throwable
*** Catalyst::Controller::Accessors
* Judoon::DB::User::Schema                            :Judoon_DB_User_Schema:
** General / Misc [/]
*** DONE [#A] Get rid of J::DB::Users / J::W::Model::Users / tests
CLOSED: [2012-03-28 Wed 14:10]
*** DONE [#A] Convert DB::User to DBIC
CLOSED: [2012-03-28 Wed 13:45]
*** TODO [#A] DSColumn creation code should probably be moved into Dataset
Right now, User creates DSColumns.  That seems weird. That should be
DS's responsibility.  Also, DSColumns create their own shortname.  I
think that that's Dataset's job, since we don't want DSColumns in a
dataset to have identical shortnames.
*** TODO [#C] Later may need to create a wrapper class for code that doesn't live in any one result
See http://www.perlmonks.org/?node_id=915657 for how to wrap this with a model.
E.G. create Judoon::DB::User that has => schema
*** TODO [#B] create per-user databases
When a user uploads a spreadsheet, create a new database and deploy to there.
See Catalyst mailing list, "[Catalyst] Authentication in a Many Database Scenario (again)", May 15, 2012
*** TODO [#A] need ordered relationships (Dataset => DatasetColumn, Page => PageColumn)

*** TODO [#A] need timestamps for Pages / Datasets  
** Result::DatasetColumn [/]
*** TODO [#A] DatasetColumns needs an order field
*** TODO [#A] DatasetColumns.name should probably be called .title
PageColumns uses .title  (title seems more apropos for Columns)
what about Page or Dataset?
** Result::User [2/3]
*** DONE [#A] Fill out User class to make a proper user
CLOSED: [2012-07-17 Tue 12:17]
password, email, etc.
DBIx::Class::PassphraseColumn
Authen::Passphrase::BlowfishCrypt
http://www.catalystframework.org/calendar/2011/15
Catalyst::Authentication::Realm::SimpleDB
Catalyst::Authentication::Store::DBIx::Class
*** DONE [#B] create test xls to excercise import_data()             :test:
CLOSED: [2012-07-19 Thu 21:33]
specifically, add a data column w/o a name
*** TODO [#A] move R::User::import_data into its own module
* Judoon::Tmpl                                                  :Judoon_Tmpl:
** TemplateTranslator [/]
*** DONE [#A] Fill out TemplateTranslator
CLOSED: [2012-05-15 Tue 16:14]
- Create J::Tmpl::Widget class
J::Tmpl::Widget::Text, J::Tmpl::Widget::Data, etc.
Can convert from class to html or template?
** Node [2/2]
*** DONE don't use abstract base class, use role instead.
CLOSED: [2012-08-14 Tue 17:50]
[10:45am] melo: I've read M::Manual::Roles the bit about Abstract base classes… Are they considered evil, to be avoided, in Moose?
[10:46am] mst: roles obsolete abstract base classes
[10:46am] rjbs: They're just not really very useful with roles around.
[10:46am] melo: not quite. Sure they provide most of the same stuff, but your final class is no longer isa('AbstractBaseClass')
[10:47am] mst: erm, and?
[10:47am] melo: mind you, this is not a problem I'm having, more of a crisis of faith
[10:47am] mst: your fincal class ->does('NameOfRole')
[10:47am] melo: yeah...
[10:47am] mst: it isn't really an isa relationship anyway
[10:47am] melo: old habits I guess
[10:47am] mst: you're basically saying "your solution is not complete because an implementation detail becomes very very slightly different"
[10:47am] mst: I find this an unconvincing argument 
[10:48am] melo: the use case I was envisioning can also be solved with roles
[10:48am] melo:
[10:48am] melo: just for a minute, let's say it would make sense to have an abstract class, just as a though exercise...
[10:49am] melo: I guess at meta it would be a subclass of Moose::Meta::Class that would forbid the creation of instances.
[10:50am] melo: And also at role composition, it would take all unsatisfied requires and make them their own, and force them to be satisfied by extends on the final class...
[10:50am] rjbs: MooseX::ABC exists, but there are problems because of Perl.
[10:52am] melo: rjbs: thx, searching for Moose abstract on metacpan it barely makes the suggestion list, so I didn't find it.
[10:52am] amiri left the chat room. (Read error: Connection reset by peer)
[10:52am] melo: anyway, just a idle though, cary on...
[10:53am] amiri joined the chat room.
[10:53am] rjbs: I had wanted them myself in the past for different reasons, but eventually I gave up.
[10:53am] rjbs: how I learned to stop worrying and love traits
[10:54am] amiri left the chat room. (Read error: Connection reset by peer)
[10:55am] melo: yeah. I was planning on using them to group several roles into a single abstract class as a "suggested combination" but its even better as a role that composes other roles… So it's not even the best solution in my case.
[10:57am] PerlStalker joined the chat room.
[10:58am] amiri joined the chat room.
[11:04am] rjbs:
[11:05am] 
*** DONE maybe 'type' should be an attribute?
CLOSED: [2012-08-14 Tue 17:50]
** Dialect::WebWidgets [0/2]                           :_Dialect_WebWidgets:
*** TODO [#B] move widget-format-target into its own hidden with name widget-link-null
need to update WebWidgets.pm && library.tt
*** TODO [#B] maybe this should be moved into javascript?
we need JS anyway to upload it, may JS could read on-page template and
convert into a JSON struct?  JS would also have to take similar JSON
struct and build the webwidgets.
*** TODO [#A] unify webwidget templates
Right now we have webwidget templates in ::Dialect::WebWidgets and in forms/*/library.tt
Find some way so we don't have to edit in two places.
Maybe instead, do the above.
** Dialect::JQueryTemplate [1/2]
*** DONE need to write a parser
CLOSED: [2012-07-27 Fri 09:11]
*** TODO why are varstrings variable / static?
Can't we determine that from the existence of variable_segments?
Dialect::JQ currently assumes that they are static.  Should we change?
* Judoon::Spreadsheet [2/8]                              :Judoon_Spreadsheet:
** DONE [#B] move code from J:DB::U::S::R::U::import_data() into here
CLOSED: [2012-08-01 Wed 14:20]
** DONE [#A] dies when given an XLSX
CLOSED: [2012-08-14 Tue 13:34]
Complains about 'zip archive'
Needs an IO::File, which open my $IN isn't
** TODO [#A] make J::Spreadsheet an object
This module is currently terribly designed.  It just has a couple of
functions with no flexibility.  It should probably be an object that
actually stores the returned Spreadsheet::Read structure in case we need it later.
J::DB::User::S::R::Dataset can then get what it needs from the object.
** TODO [#B] needs support for tab-delimited files
** TODO [#B] should probably take filename & handle, to help guess $parser
** TODO [#A] Can we use google docs to process our spreadsheets?
** TODO [#B] Seem to have encoding errors with troublesome.xls
** TODO [#B] split up test spreadsheets
troublsome.xls goes away
weird encoding issues in encoding.xls
empty columns in emptycol.xls
etc. etc.
make a bunch of spreadsheets that each demonstrate one particular problem
* Judoon::SiteLinker [0/4]                                :Judoon_SiteLinker:
** TODO Needs a lot more maps
** TODO Can use Uniprot ID mapper to convert ids
Then, the uniprot_acc to gene map could convert to gene_id, and use that mapping
** TODO Need order encoded in mapping
** TODO Would this be easier to do in a database, or more simply represented as a schema?
** TODO [#B] Gene wiki for sitelinker

* judoon.js [0/2]                                                 :judoon_js:
** TODO [#A] Move JS into object
Namespace it!
** TODO [#B] have it build the webwidgets.
See Judoon::Tmpl/Dialect::WebWidgets todo entry
* deployment [0/2]                                               :deployment:
** TODO add deployment deps
- [ ] Starman
- [ ] Server::Starter
- [ ] Net::Server::SS::PreFork
- [X] DBIx::Class::Migration
** TODO questionable deps
- [ ] JSON::Any
